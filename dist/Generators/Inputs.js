var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { codeBlock } from 'common-tags';
import { toObjectType, toNamedArgument, toNamedArgumentType, toObjectKeyValue, } from '../helpers.gen.js';
var InputsGenerator = (function () {
    function InputsGenerator(model) {
        var _this = this;
        this.FindOneArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereUniqueInput.t>,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t=?,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereUniqueInput.t>,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t=?,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereUniqueInput.t>,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where=?,\n          ()\n        ) => {\n          select: select,\n          ", "\n          where: where,\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereUniqueInput.t>,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where=?,\n          ()\n        ) => {\n          select: select,\n          ", "\n          where: where,\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.FindManyArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereInput.t>,\n          skip: option<int>,\n          after: option<WhereUniqueInput.t>,\n          before: option<WhereUniqueInput.t>,\n          first: option<int>,\n          last: option<int>\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereInput.t=?,\n          ~skip: int=?,\n          ~after: WhereUniqueInput.t=?,\n          ~before: WhereUniqueInput.t=?,\n          ~first: int=?,\n          ~last: int=?,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereInput.t>,\n          skip: option<int>,\n          after: option<WhereUniqueInput.t>,\n          before: option<WhereUniqueInput.t>,\n          first: option<int>,\n          last: option<int>\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereInput.t=?,\n          ~skip: int=?,\n          ~after: WhereUniqueInput.t=?,\n          ~before: WhereUniqueInput.t=?,\n          ~first: int=?,\n          ~last: int=?,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereInput.t>,\n          skip: option<int>,\n          after: option<WhereUniqueInput.t>,\n          before: option<WhereUniqueInput.t>,\n          first: option<int>,\n          last: option<int>\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where=?,\n          // ~orderBy=?,\n          ~skip=?,\n          ~after=?,\n          ~before=?,\n          ~first=?,\n          ~last=?,\n          ()\n        ) => {\n          select: select,\n          ", "\n          where: where,\n          // orderBy: orderBy,\n          skip: skip,\n          after: after,\n          before: before,\n          first: first,\n          last: last\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: option<WhereInput.t>,\n          skip: option<int>,\n          after: option<WhereUniqueInput.t>,\n          before: option<WhereUniqueInput.t>,\n          first: option<int>,\n          last: option<int>\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where=?,\n          // ~orderBy=?,\n          ~skip=?,\n          ~after=?,\n          ~before=?,\n          ~first=?,\n          ~last=?,\n          ()\n        ) => {\n          select: select,\n          ", "\n          where: where,\n          // orderBy: orderBy,\n          skip: skip,\n          after: after,\n          before: before,\n          first: first,\n          last: last\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.CreateArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: CreateInput.t\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~data: CreateInput.t,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: CreateInput.t\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~data: CreateInput.t,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: CreateInput.t\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~data,\n          (),\n        ) => {\n          select: select,\n          ", "\n          data: data\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: CreateInput.t\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~data,\n          (),\n        ) => {\n          select: select,\n          ", "\n          data: data\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.UpdateArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: UpdateInput.t,\n          where: WhereUniqueInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~data: UpdateInput.t,\n          ~where: WhereUniqueInput.t,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: UpdateInput.t,\n          where: WhereUniqueInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~data: UpdateInput.t,\n          ~where: WhereUniqueInput.t,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: UpdateInput.t,\n          where: WhereUniqueInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~data,\n          ~where,\n          (),\n        ) => {\n          select: select,\n          ", "\n          data: data,\n          where: where,\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          data: UpdateInput.t,\n          where: WhereUniqueInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~data,\n          ~where,\n          (),\n        ) => {\n          select: select,\n          ", "\n          data: data,\n          where: where,\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.UpdateManyArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n        type t = {\n          where: option<WhereInput.t>,\n          data: ", ".t\n        };\n\n        let make: (\n          ~where: WhereInput.t=?,\n          ~data: ", ".t,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          where: option<WhereInput.t>,\n          data: ", ".t\n        };\n\n        let make: (\n          ~where: WhereInput.t=?,\n          ~data: ", ".t,\n          unit\n        ) => t;\n      "])), model.name, model.name),
                re: codeBlock(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n        type t = {\n          where: option<WhereInput.t>,\n          data: ", ".t\n        };\n\n        let make = (\n          ~where=?,\n          ~data,\n          (),\n        ) => {\n          where: where,\n          data: data\n        };\n      "], ["\n        type t = {\n          where: option<WhereInput.t>,\n          data: ", ".t\n        };\n\n        let make = (\n          ~where=?,\n          ~data,\n          (),\n        ) => {\n          where: where,\n          data: data\n        };\n      "])), model.name)
            };
        };
        this.UpsertArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n          create: CreateInput.t,\n          update: UpdateInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t,\n          ~create: CreateInput.t,\n          ~update: UpdateInput.t,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n          create: CreateInput.t,\n          update: UpdateInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t,\n          ~create: CreateInput.t,\n          ~update: UpdateInput.t,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n          create: CreateInput.t,\n          update: UpdateInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where,\n          ~create,\n          ~update,\n          (),\n        ) => {\n          select: select,\n          ", "\n          where: where,\n          create: create,\n          update: update,\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n          create: CreateInput.t,\n          update: UpdateInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where,\n          ~create,\n          ~update,\n          (),\n        ) => {\n          select: select,\n          ", "\n          where: where,\n          create: create,\n          update: update,\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.DeleteArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n        };\n\n        let make: (\n          ~select: Select.t=?,\n          ", "\n          ~where: WhereUniqueInput.t,\n          unit\n        ) => t;\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_: Include.t=?,' : ''),
                re: codeBlock(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where,\n          (),\n        ) => {\n          select: select,\n          ", "\n          where: where,\n        };\n      "], ["\n        type t = {\n          select: option<Select.t>,\n          ", "\n          where: WhereUniqueInput.t,\n        };\n\n        let make = (\n          ~select=?,\n          ", "\n          ~where,\n          (),\n        ) => {\n          select: select,\n          ", "\n          where: where,\n        };\n      "])), _this.hasRelations ? 'include_: option<Include.t>,' : '', _this.hasRelations ? '~include_=?,' : '', _this.hasRelations ? 'include_: include_,' : '')
            };
        };
        this.DeleteManyArgs = function () {
            var model = _this.model;
            return {
                rei: codeBlock(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n        type t = {\n          where: option<WhereInput.t>,\n        };\n\n        let make: (\n          ~where: WhereInput.t=?,\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          where: option<WhereInput.t>,\n        };\n\n        let make: (\n          ~where: WhereInput.t=?,\n          unit\n        ) => t;\n      "]))),
                re: codeBlock(templateObject_16 || (templateObject_16 = __makeTemplateObject(["\n        type t = {\n          where: option<WhereInput.t>,\n        };\n\n        let make = (\n          ~where=?,\n          (),\n        ) => {\n          where: where,\n        };\n      "], ["\n        type t = {\n          where: option<WhereInput.t>,\n        };\n\n        let make = (\n          ~where=?,\n          (),\n        ) => {\n          where: where,\n        };\n      "])))
            };
        };
        this.Select = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields.map(function (field) { return (__assign(__assign({}, field), { isRequired: false, type: 'Boolean' })); }) });
            return {
                rei: codeBlock(templateObject_17 || (templateObject_17 = __makeTemplateObject(["\n        type t = {\n          ", "\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", "\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_18 || (templateObject_18 = __makeTemplateObject(["\n        type t = {\n          ", "\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", "\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.Include = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields
                    .filter(function (field) { return field.kind == 'object'; })
                    .flatMap(function (field) { return [
                    __assign(__assign({}, field), { name: field.name, kind: 'scalar', isRequired: false, type: 'Boolean', isList: false }),
                    __assign(__assign({}, field), { name: "".concat(field.name, "Where"), isRequired: false, type: "FindMany", isList: false }),
                ]; }) });
            return {
                rei: codeBlock(templateObject_19 || (templateObject_19 = __makeTemplateObject(["\n        type t = {\n          ", "\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", "\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_20 || (templateObject_20 = __makeTemplateObject(["\n        type t = {\n          ", "\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", "\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.WhereInput = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields.map(function (field) { return (__assign(__assign({}, field), { isRequired: false })); }) });
            return {
                rei: codeBlock(templateObject_21 || (templateObject_21 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_22 || (templateObject_22 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.WhereUniqueInput = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields
                    .filter(function (field) { return field.isUnique || field.isId; })
                    .map(function (field) { return (__assign(__assign({}, field), { isRequired: false })); }) });
            return {
                rei: codeBlock(templateObject_23 || (templateObject_23 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        type connectOne = {\n          connect?: t\n        }\n\n        type connectMany = {\n          connect?: array<t>\n        }\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        type connectOne = {\n          connect?: t\n        }\n\n        type connectMany = {\n          connect?: array<t>\n        }\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_24 || (templateObject_24 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        type connectOne = {\n          connect?: t\n        }\n\n        type connectMany = {\n          connect?: array<t>\n        }\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        type connectOne = {\n          connect?: t\n        }\n\n        type connectMany = {\n          connect?: array<t>\n        }\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.CreateInput = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields.map(function (field) {
                    return __assign(__assign({}, field), { isRequired: field.hasOwnProperty('default') || field.isUpdatedAt
                            ? false
                            : field.isRequired });
                }) });
            return {
                rei: codeBlock(templateObject_25 || (templateObject_25 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_26 || (templateObject_26 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.UpdateInput = function () {
            var model = __assign(__assign({}, _this.model), { fields: _this.model.fields.map(function (field) { return (__assign(__assign({}, field), { isRequired: false })); }) });
            return {
                rei: codeBlock(templateObject_27 || (templateObject_27 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make: (\n          ", ",\n          unit\n        ) => t;\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgumentType).join(',\n')),
                re: codeBlock(templateObject_28 || (templateObject_28 = __makeTemplateObject(["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "], ["\n        type t = {\n          ", ",\n        };\n\n        let make = (\n          ", ",\n          (),\n        ) => {\n          {\n            ", "\n          };\n        };\n      "])), model.fields.map(toObjectType).join(',\n'), model.fields.map(toNamedArgument).join(',\n'), model.fields.map(toObjectKeyValue).join(',\n'))
            };
        };
        this.generate = function () {
            return {
                rei: codeBlock(templateObject_29 || (templateObject_29 = __makeTemplateObject(["\n        module rec FindOneArgs: {\n          ", "\n        }\n        and FindManyArgs: {\n          ", "\n        }\n        and CreateArgs: {\n          ", "\n        }\n        and UpdateArgs: {\n          ", "\n        }\n        and UpdateManyArgs: {\n          ", "\n        }\n        and UpsertArgs: {\n          ", "\n        }\n        and DeleteArgs: {\n          ", "\n        }\n        and DeleteManyArgs: {\n          ", "\n        }\n        and Select: {\n          ", "\n        }\n        ", "\n        and WhereInput: {\n          ", "\n        }\n        and WhereUniqueInput: {\n          ", "\n        }\n        and CreateInput: {\n          ", "\n        }\n        and UpdateInput: {\n          ", "\n        }\n      "], ["\n        module rec FindOneArgs: {\n          ", "\n        }\n        and FindManyArgs: {\n          ", "\n        }\n        and CreateArgs: {\n          ", "\n        }\n        and UpdateArgs: {\n          ", "\n        }\n        and UpdateManyArgs: {\n          ", "\n        }\n        and UpsertArgs: {\n          ", "\n        }\n        and DeleteArgs: {\n          ", "\n        }\n        and DeleteManyArgs: {\n          ", "\n        }\n        and Select: {\n          ", "\n        }\n        ", "\n        and WhereInput: {\n          ", "\n        }\n        and WhereUniqueInput: {\n          ", "\n        }\n        and CreateInput: {\n          ", "\n        }\n        and UpdateInput: {\n          ", "\n        }\n      "])), _this.FindOneArgs().rei, _this.FindManyArgs().rei, _this.CreateArgs().rei, _this.UpdateArgs().rei, _this.UpdateManyArgs().rei, _this.UpsertArgs().rei, _this.DeleteArgs().rei, _this.DeleteManyArgs().rei, _this.Select().rei, _this.hasRelations
                    ? "\n              and Include: {\n                ".concat(_this.Include().rei, "\n              }\n              ")
                    : '', _this.WhereInput().rei, _this.WhereUniqueInput().rei, _this.CreateInput().rei, _this.UpdateInput().rei),
                re: codeBlock(templateObject_30 || (templateObject_30 = __makeTemplateObject(["\n        module rec FindOneArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and FindManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and CreateArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpsertArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and DeleteArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and DeleteManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and Select: {\n          ", "\n        } = {\n          ", "\n        }\n        ", "\n        and WhereInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and WhereUniqueInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and CreateInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateInput: {\n          ", "\n        } = {\n          ", "\n        }\n      "], ["\n        module rec FindOneArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and FindManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and CreateArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpsertArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and DeleteArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and DeleteManyArgs: {\n          ", "\n        } = {\n          ", "\n        }\n        and Select: {\n          ", "\n        } = {\n          ", "\n        }\n        ", "\n        and WhereInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and WhereUniqueInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and CreateInput: {\n          ", "\n        } = {\n          ", "\n        }\n        and UpdateInput: {\n          ", "\n        } = {\n          ", "\n        }\n      "])), _this.FindOneArgs().rei, _this.FindOneArgs().re, _this.FindManyArgs().rei, _this.FindManyArgs().re, _this.CreateArgs().rei, _this.CreateArgs().re, _this.UpdateArgs().rei, _this.UpdateArgs().re, _this.UpdateManyArgs().rei, _this.UpdateManyArgs().re, _this.UpsertArgs().rei, _this.UpsertArgs().re, _this.DeleteArgs().rei, _this.DeleteArgs().re, _this.DeleteManyArgs().rei, _this.DeleteManyArgs().re, _this.Select().rei, _this.Select().re, _this.hasRelations
                    ? "\n              and Include: {\n                ".concat(_this.Include().rei, "\n              } = {\n                ").concat(_this.Include().re, "\n              }\n              ")
                    : '', _this.WhereInput().rei, _this.WhereInput().re, _this.WhereUniqueInput().rei, _this.WhereUniqueInput().re, _this.CreateInput().rei, _this.CreateInput().re, _this.UpdateInput().rei, _this.UpdateInput().re)
            };
        };
        this.model = model;
        this.hasRelations = model.fields.some(function (field) { return field.kind === 'object'; });
    }
    return InputsGenerator;
}());
export default InputsGenerator;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30;
//# sourceMappingURL=Inputs.js.map